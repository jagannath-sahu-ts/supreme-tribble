name: Sync Merged PR to GitHub.com (via SSH)

on:
  pull_request:
    types: [closed]

jobs:
  sync-pr-merge:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted

    env:
      GHEC_REPO: git@github.com:thoughtspot/${{ github.event.repository.name }}.git

    steps:
      - name: Log sync initiation
        run: |
          echo "Initiating sync for PR #${{ github.event.pull_request.number }} to branch ${{ github.event.pull_request.base.ref }}"
          echo "Repository: ${{ github.event.repository.name }}"

      - name: Set up SSH access to GitHub.com
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GHEC_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        continue-on-error: false

      - name: Checkout source repo (internal GHE)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set env variables
        run: |
          echo "TARGET_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "MERGE_SHA=${{ github.event.pull_request.merge_commit_sha }}" >> $GITHUB_ENV

      - name: Create squashed commit from merged PR
        run: |
          git config user.name "jagannath-sahu-ts"
          git config user.email "jagannath.sahu@thoughtspot.com"
          git config url."git@github.com:".insteadOf "https://github.com/"
          
          # Checkout the target branch first
          git checkout ${TARGET_BRANCH}
          
          # Get the merge commit SHA
          echo "Merge commit SHA: ${MERGE_SHA}"
          
          # Create a temporary branch from the target branch to store our squashed changes
          git checkout -b temp-sync-branch
          
          # Find all the files that were changed in the PR
          echo "Getting list of changed files..."
          CHANGED_FILES=$(git diff --name-only ${TARGET_BRANCH}..${MERGE_SHA})
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files detected in the PR. Nothing to sync."
            exit 1
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Checkout the merge commit to get its state
          git checkout ${MERGE_SHA}
          
          # Checkout the target branch again
          git checkout ${TARGET_BRANCH}
          
          # Reset the target branch to create our squashed commit
          echo "Creating squashed changes..."
          
          # For each changed file, copy it from the merge commit
          for FILE in $CHANGED_FILES; do
            mkdir -p $(dirname "$FILE")
            git show ${MERGE_SHA}:"$FILE" > "$FILE" 2>/dev/null || echo "File $FILE was deleted in PR"
          done
          
          # Stage all changes
          git add -A
          
          # Create the commit
          git commit -m "Sync ${TARGET_BRANCH} from internal (PR #${PR_NUMBER})"
        continue-on-error: false

      - name: Add GitHub.com as remote
        run: |
          echo "Adding GitHub.com as remote 'public'..."
          git remote add public $GHEC_REPO
          
          echo "Fetching from public remote..."
          git fetch public ${TARGET_BRANCH} || echo "Target branch does not exist on GitHub.com (will be created)"
        continue-on-error: false

      - name: Check for conflicts on destination
        id: conflict_check
        run: |
          echo "Checking for potential conflicts..."
          DEST_HEAD=$(git rev-parse public/${TARGET_BRANCH} 2>/dev/null || echo "none")
          
          if [ "$DEST_HEAD" != "none" ]; then
            echo "Destination branch exists. Checking for conflicts..."
            if git merge-base --is-ancestor $DEST_HEAD HEAD; then
              echo "No conflict detected. Safe to sync."
              echo "conflict_detected=false" >> $GITHUB_OUTPUT
            else
              echo "WARNING: Conflict detected. Aborting sync to prevent data loss."
              echo "conflict_detected=true" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Destination branch doesn't exist. Will create it."
            echo "conflict_detected=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: false

      - name: Backup GitHub.com branch (if exists)
        if: steps.conflict_check.outputs.conflict_detected == 'false'
        run: |
          echo "Creating backup of existing branch (if any)..."
          if git show-ref --verify --quiet refs/remotes/public/${TARGET_BRANCH}; then
            echo "Creating backup branch: backup-before-sync-${TARGET_BRANCH}-${TIMESTAMP}"
            git push public public/${TARGET_BRANCH}:refs/heads/backup-before-sync-${TARGET_BRANCH}-${TIMESTAMP}
            echo "Backup created successfully."
          else
            echo "No existing branch to backup."
          fi
        continue-on-error: true

      - name: Force push squashed commit to GitHub.com
        if: steps.conflict_check.outputs.conflict_detected == 'false'
        run: |
          echo "Pushing squashed commit to GitHub.com..."
          if ! git push --force public HEAD:${TARGET_BRANCH}; then
            echo "::error::Failed to push to public repository"
            exit 1
          fi
          echo "Successfully pushed to ${TARGET_BRANCH} on public repository"
        continue-on-error: false

      - name: Post sync status
        if: steps.conflict_check.outputs.conflict_detected == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Changes from PR #${{ github.event.pull_request.number }} have been successfully synced to the public repository on branch `${{ github.event.pull_request.base.ref }}`'
            })
        continue-on-error: true

      - name: Notify if sync failed due to conflicts
        if: failure() && steps.conflict_check.outputs.conflict_detected == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Failed to sync changes to the public repository due to potential conflicts. Manual intervention required.'
            })
        continue-on-error: true
